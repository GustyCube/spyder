version: '3.8'

services:
  # Redis for deduplication and work queue
  redis:
    image: redis:7-alpine
    container_name: spyder-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - spyder-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: spyder-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - spyder-network
    depends_on:
      - spyder

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: spyder-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - spyder-network
    depends_on:
      - prometheus

  # SPYDER probe service
  spyder:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spyder-probe
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_QUEUE_ADDR=redis:6379
      - REDIS_QUEUE_KEY=spyder:queue
    volumes:
      - ./configs:/app/configs
      - ./spool:/app/spool
      - ./output:/app/output
    command: >
      /app/spyder
      -config=/app/configs/docker.yaml
    networks:
      - spyder-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Optional: Mock ingest server for testing
  mock-ingest:
    image: nginx:alpine
    container_name: spyder-mock-ingest
    ports:
      - "8080:80"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - spyder-network

networks:
  spyder-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
  grafana-data: